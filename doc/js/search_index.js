var search_data = {"index":{"searchIndex":["framestest","object","sinapsemqttclient","mqttclient","sinapsemqttclientsingleton","connect()","connected?()","disconnect()","is_valid_address()","is_valid_attribute()","is_valid_radio_configuration()","new()","publish()","receive_messages_from_subscribed_topics()","subscribe()","test_send_and_receive_messages()","test_sinapse_mqtt_client_connects_default()","test_sinapse_mqtt_client_connects_ssl()","test_sinapse_mqtt_client_disconnects()","test_sinapse_mqtt_client_exists()","gemfile","license","readme","rakefile","sinapse_mqtt_client.gemspec"],"longSearchIndex":["framestest","object","sinapsemqttclient","sinapsemqttclient::mqttclient","sinapsemqttclientsingleton","sinapsemqttclient::mqttclient#connect()","sinapsemqttclient::mqttclient#connected?()","sinapsemqttclient::mqttclient#disconnect()","object#is_valid_address()","object#is_valid_attribute()","object#is_valid_radio_configuration()","sinapsemqttclient::mqttclient::new()","sinapsemqttclient::mqttclient#publish()","sinapsemqttclient::mqttclient#receive_messages_from_subscribed_topics()","sinapsemqttclient::mqttclient#subscribe()","framestest#test_send_and_receive_messages()","framestest#test_sinapse_mqtt_client_connects_default()","framestest#test_sinapse_mqtt_client_connects_ssl()","framestest#test_sinapse_mqtt_client_disconnects()","framestest#test_sinapse_mqtt_client_exists()","","","","",""],"info":[["FramesTest","","FramesTest.html","",""],["Object","","Object.html","",""],["SinapseMQTTClient","","SinapseMQTTClient.html","","<p>require_relative “napse_frames/extended_frames” require_relative\n“napse_frames/evo_frames” …\n"],["SinapseMQTTClient::MQTTClient","","SinapseMQTTClient/MQTTClient.html","","<p>MQTTClient: Class that implements the management of a MQTT Client\n\n<pre>Connection, disconnection, send and ...</pre>\n"],["SinapseMQTTClientSingleton","","SinapseMQTTClientSingleton.html","",""],["connect","SinapseMQTTClient::MQTTClient","SinapseMQTTClient/MQTTClient.html#method-i-connect","(host=\"m21.cloudmqtt.com\", port=10609, tls=false, user=\"ugjznzkc\", password=\"7UG2yVgH3zzi\")","<p>Function to connect to a MQTT Broker Inputs: host: String - Url of the\nbroker port: Int - Port number …\n"],["connected?","SinapseMQTTClient::MQTTClient","SinapseMQTTClient/MQTTClient.html#method-i-connected-3F","()","<p>Function to ask if the client is connected to the broker\n"],["disconnect","SinapseMQTTClient::MQTTClient","SinapseMQTTClient/MQTTClient.html#method-i-disconnect","()","<p>Function to disconnect the MQTT client from the server / broker\n"],["is_valid_address","Object","Object.html#method-i-is_valid_address","(address)",""],["is_valid_attribute","Object","Object.html#method-i-is_valid_attribute","(attribute)",""],["is_valid_radio_configuration","Object","Object.html#method-i-is_valid_radio_configuration","(address)",""],["new","SinapseMQTTClient::MQTTClient","SinapseMQTTClient/MQTTClient.html#method-c-new","()",""],["publish","SinapseMQTTClient::MQTTClient","SinapseMQTTClient/MQTTClient.html#method-i-publish","(topic, message)","<p>Function to publish a message in a given topic Inputs: topic: String -\nAddress where the message will …\n"],["receive_messages_from_subscribed_topics","SinapseMQTTClient::MQTTClient","SinapseMQTTClient/MQTTClient.html#method-i-receive_messages_from_subscribed_topics","()","<p>Function to receive message from the subscribed topics. It runs as a\nforever / infinite loop if it is …\n"],["subscribe","SinapseMQTTClient::MQTTClient","SinapseMQTTClient/MQTTClient.html#method-i-subscribe","(topic)","<p>Function to subscribe the client to any topic Inputs:  topic: String -\nAddress where the client will …\n"],["test_send_and_receive_messages","FramesTest","FramesTest.html#method-i-test_send_and_receive_messages","()",""],["test_sinapse_mqtt_client_connects_default","FramesTest","FramesTest.html#method-i-test_sinapse_mqtt_client_connects_default","()",""],["test_sinapse_mqtt_client_connects_ssl","FramesTest","FramesTest.html#method-i-test_sinapse_mqtt_client_connects_ssl","()",""],["test_sinapse_mqtt_client_disconnects","FramesTest","FramesTest.html#method-i-test_sinapse_mqtt_client_disconnects","()",""],["test_sinapse_mqtt_client_exists","FramesTest","FramesTest.html#method-i-test_sinapse_mqtt_client_exists","()",""],["Gemfile","","Gemfile.html","","<p>source &#39;rubygems.org&#39;\n<p># Specify your gem&#39;s dependencies in sinapse_mqtt_client.gemspec\ngemspec …\n"],["LICENSE","","LICENSE_txt.html","","<p>Copyright © 2016 ralcaide\n<p>MIT License\n<p>Permission is hereby granted, free of charge, to any person obtaining …\n"],["README","","README_md.html","","<p>Sinapse MQTT Client\n<p>This project implements a ruby gem that offers an MQTT Client with the\nSinapse API …\n"],["Rakefile","","Rakefile.html","","<p>require “bundler/gem_tasks”\n"],["sinapse_mqtt_client.gemspec","","sinapse_mqtt_client_gemspec.html","","<p>lib = File.expand_path(&#39;../lib&#39;, __FILE__) $LOAD_PATH.unshift(lib)\nunless $LOAD_PATH.include?(lib) …\n"]]}}